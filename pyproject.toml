[project]
name = "xp"
version = "0.3.0"
description = "XP Protocol Communication Tool"
authors = [
    {name = "lduchosal", email = "luc+github@2113.ch"},
]
dependencies = [
    "click>=8.0",
    "click-help-colors>=0.9",
    "pyyaml>=6.0",
    "structlog>=22.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.0.0",
    "HAP-python[QRCode]>=5.0.0"
]
requires-python = ">=3.10"
readme = "README.md"
license = {text = "MIT"}

[project.scripts]
xp = "xp.cli:cli"

[dependency-groups]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "flake8>=5.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
    "vulture>=2.14",
    "httpx>=0.24.0"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/xp",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=90"
]

[tool.coverage.run]
source = ["src/xp"]
omit = ["tests/*", "src/xp/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.scripts]
test = "env PYTHONPATH=src python -m pytest tests/ -v --cov=src/xp --cov-report=term-missing"
test-unit = "env PYTHONPATH=src python -m pytest tests/unit/ -v"
test-integration = "env PYTHONPATH=src python -m pytest tests/integration/ -v"
test-cov = "env PYTHONPATH=src python -m pytest tests/ -v --cov=src/xp --cov-report=html --cov-report=term-missing"
lint = "ruff check src/ tests/"
lint-fix = "ruff check --fix src/ tests/"
format = "black src/ tests/"
format-check = "black --check src/ tests/"
typecheck = "mypy src/"
check = ["lint", "format-check", "typecheck", "test"]
install = "pdm install"
install-dev = "pdm install -G dev"
clean = "rm -rf .coverage htmlcov/ .pytest_cache/ __pycache__/ src/xp/__pycache__/"

[tool.vulture]
exclude = ["src/xp/cli"]
ignore_decorators = ["@click"]
make_whitelist = true
min_confidence = 80
paths = ["src", "tests"]
sort_by_size = true
verbose = false