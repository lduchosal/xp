package Conson.Contool2000XP.Conbus;

import Conson.Contool2000XP.DataModel.ModuleFunction;
import Conson.Contool2000XP.DataModel.ModuleParameter;
import Conson.Contool2000XP.DataModel.XPModuleFunctions;
import Conson.Contool2000XP.Persistency.ConsonSerializable;
import java.util.Vector;

public class Xp24ActionTable
  extends XPActionTable
  implements ConsonSerializable
{
  public static final int MS300 = 12;
  public static final int MS500 = 20;
  private ModuleFunction[] functions;
  private ModuleParameter[] parameters;
  private boolean mutex12;
  private boolean mutex34;
  private boolean lamella12;
  private boolean lamella34;
  private int ms;
  private static final int AT_MAX_ROWS = 4;

  public Xp24ActionTable() {
    this.functions = new ModuleFunction[4];
    this.parameters = new ModuleParameter[4];


    for (int rowNo = 0; rowNo < 4; rowNo++) {
      ModuleFunction function = XPModuleFunctions.instance().getModuleFunction(3);
      this.functions[rowNo] = function;
    }

    this.mutex12 = false;
    this.mutex34 = false;

    this.lamella12 = false;
    this.lamella34 = false;

    this.ms = 12;
  }

  public Xp24ActionTable(Xp24ActionTable other) {
    super(other);

    this.functions = other.functions;
    this.parameters = other.parameters;

    this.mutex12 = other.mutex12;
    this.mutex34 = other.mutex34;

    this.lamella12 = other.lamella12;
    this.lamella34 = other.lamella34;
    this.ms = other.ms;
  }



  public Vector generateMSTableTelegrams(String serial) {
    Vector<String> telegrams = new Vector();
    Checksum cc = new Checksum();

    String data = "";
    data = data + "S" + serial + "F17DAAAA";


    for (int i = 0; i < 4; i++) {
      data = data + encodeRow(i);
    }

    data = data + (this.mutex12 ? "AB" : "AA");
    data = data + (this.mutex34 ? "AB" : "AA");

    data = data + Checksum.nibble((byte)this.ms);


    data = data + (this.lamella12 ? "AB" : "AA");
    data = data + (this.lamella34 ? "AB" : "AA");


    data = data + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

    data = "<" + data + cc.calculateChecksum(data) + ">";
    telegrams.add(data);

    return telegrams;
  }

  public void decodeMSTelegrams(Vector<String> msTelegrams) {
    String concat = "";
    for (String s : msTelegrams) {
      concat = concat + s.substring(20, 84);
    }

    byte[] raw = Checksum.deNibble(concat.substring(0, 64));

    Vector<ModuleParameter> timeParms = XPModuleFunctions.instance().getTimeParams();
    for (int n = 0; n < 4; n++) {
      this.functions[n] = XPModuleFunctions.instance().getModuleFunction(raw[2 * n]);
      this.parameters[n] = timeParms.get(raw[2 * n + 1]);
    }

    this.mutex12 = (raw[8] != 0);
    this.mutex34 = (raw[9] != 0);
    this.ms = raw[10];
    this.lamella12 = (raw[11] != 0);
    this.lamella34 = (raw[12] != 0);
  }
  private String encodeRow(int row) {
    int parameterId;
    if (row < 0 || row > 4) return "";

    Checksum cc = new Checksum();
    String res = "";

    if (this.parameters[row] != null) {
      parameterId = this.parameters[row].getId();
    } else {

      parameterId = 0;
    }

    res = res + Checksum.nibble((byte)this.functions[row].getId());
    res = res + Checksum.nibble((byte)parameterId);
    return res;
  }

  public void setFunctions(ModuleFunction[] functions) {
    this.functions = functions;
  }

  public ModuleFunction[] getFunctions() {
    return this.functions;
  }

  public void setParameters(ModuleParameter[] parameters) {
    this.parameters = parameters;
  }

  public ModuleParameter[] getParameters() {
    return this.parameters;
  }

  public void setMutex12(boolean mutex12) {
    this.mutex12 = mutex12;
  }

  public boolean isMutex12() {
    return this.mutex12;
  }

  public void setMutex34(boolean mutex34) {
    this.mutex34 = mutex34;
  }

  public boolean isMutex34() {
    return this.mutex34;
  }

  public void setLamella12(boolean lamella12) {
    this.lamella12 = lamella12;
  }

  public boolean isLamella12() {
    return this.lamella12;
  }

  public void setLamella34(boolean lamella34) {
    this.lamella34 = lamella34;
  }

  public boolean isLamella34() {
    return this.lamella34;
  }

  public void setMs(int ms) {
    this.ms = ms;
  }

  public int getMs() {
    return this.ms;
  }

  public XPActionTable deepCopy() {
    return new Xp24ActionTable(this);
  }
}
